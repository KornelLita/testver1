import { NextResponse } from "next/server";

export async function POST(req: Request) {
	try {
		const body = await req.json();

		// Om det √§r ett f√∂ljdfr√•ge-anrop (med message-historik)
		if (body.messages) {
			const aiRes = await fetch(
				"https://openrouter.ai/api/v1/chat/completions",
				{
					method: "POST",
					headers: {
						"Content-Type": "application/json",
						Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
						"HTTP-Referer": "http://localhost:3000", // √§ndra till din dom√§n i produktion
						"X-Title": "AIGrader",
					},
					body: JSON.stringify({
						model: "gpt-3.5-turbo",
						messages: body.messages,
						temperature: 0.3,
					}),
				}
			);

			if (!aiRes.ok) {
				const errorText = await aiRes.text();
				console.error("‚ùå OpenRouter error:", errorText);
				return NextResponse.json({
					result: "Fel fr√•n OpenRouter: " + errorText,
				});
			}

			const data = await aiRes.json();
			const result =
				data.choices?.[0]?.message?.content || "Inget svar fr√•n AI.";
			return NextResponse.json({ result });
		}

		// Om det √§r f√∂rsta bed√∂mningen
		const { assignment, rubric, studentAnswer } = body;

		const prompt = `
üéì Du √§r en mycket erfaren l√§rare. Din uppgift √§r att objektivt bed√∂ma en elevs argumenterande text utifr√•n uppgiften, betygsmatrisen och elevens svar. Du f√•r inte utg√• fr√•n n√•got betyg i f√∂rv√§g ‚Äì du ska b√∂rja fr√•n noll.

üìå Regler f√∂r betyg:
- ‚úÖ A: Alla A-kriterier √§r uppfyllda
- ‚úÖ B: Alla C-kriterier √§r uppfyllda + n√•gra A-kriterier
- ‚úÖ C: Alla C-kriterier √§r uppfyllda
- ‚úÖ D: Alla E-kriterier √§r uppfyllda + n√•gra C-kriterier
- ‚úÖ E: Alla E-kriterier √§r uppfyllda
- ‚úÖ F: Om inte ens E-kriterierna uppfylls

üìù Uppgiften eleven svarar p√•:
${assignment}

üìä Betygsmatris:
${rubric}

‚úçÔ∏è Elevens svar:
${studentAnswer}

üìã G√∂r f√∂ljande:
1. S√§tt ett betyg (A‚ÄìF)
2. Motivera tydligt utifr√•n matrisen
3. Beskriv varf√∂r det inte n√•r h√∂gre betyg (om aktuellt)
4. Anv√§nd ett professionellt och tydligt spr√•k
`;

		const aiRes = await fetch("https://openrouter.ai/api/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
				"HTTP-Referer": "http://localhost:3000", // byt till din dom√§n i produktion
				"X-Title": "AIGrader",
			},
			body: JSON.stringify({
				model: "gpt-3.5-turbo",
				messages: [
					{
						role: "user",
						content: prompt,
					},
				],
				temperature: 0.3,
			}),
		});

		if (!aiRes.ok) {
			const errorText = await aiRes.text();
			console.error("‚ùå OpenRouter error:", errorText);
			return NextResponse.json({ result: "Fel fr√•n OpenRouter: " + errorText });
		}

		const data = await aiRes.json();
		const result = data.choices?.[0]?.message?.content || "Inget svar fr√•n AI.";
		return NextResponse.json({ result });
	} catch (error) {
		console.error("‚ùå AI-fel:", error);
		return NextResponse.json({ result: "N√•got gick fel vid AI-bed√∂mning." });
	}
}
